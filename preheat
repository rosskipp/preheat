#!/usr/bin/env python

import os, sys, pwd, grp, json
from os.path import expanduser

# Make sure the Dropbox module is installed
try:
  from dropbox.client import DropboxOAuth2FlowNoRedirect, DropboxClient
  from dropbox import rest as dbrest
except ImportError:
  print 'You need to install the Dropbox module first. Use "sudo pip install dropbox"'
  sys.exit(1)

class Preheat(object):
  """docstring for Preheat"""
  def __init__(self):

    self.data_dir = None
    self.config_file = None
    self.config = {'key':None, 'secret':None, 'token':None}


    # Installed directory
    self.program_dir = os.path.dirname(os.path.realpath(__file__))

    if(os.name == 'posix'):
      self.data_dir = expanduser('~') + "/.preheat"
      self.config_file = self.data_dir + "/config.json"
    else:
      print 'You are running preheat on an unsupported operating system.'
      sys.exit(1)

    # Create folder if it doesn't exist along with config file
    if not os.path.exists(self.data_dir):
      os.makedirs(self.data_dir)
      with open(self.config_file, 'w') as f:
        json.dump(self.config, f)

    # Read configuration settings
    with open(self.config_file, 'r') as f:
      self.config = json.load(f)

    if self.config['key'] == None or self.config['secret'] == None:
      print 'You need to set key and secret in config.json located at ' + self.config_file
      sys.exit(1)

  # def set_owner(self, path):
  #   try:
  #     gid = grp.getgrnam(group)
  #     uid = pwd.getpwnam(user)
  #     os.chown(path, uid, gid)
  #   except KeyError:
  #     print 'Invalid user or group'

  def create_dir(self, path):
    if not os.path.exists(path):
      os.makedirs(path)
      # set_owner(path)

  def choose_file(self, metadata):
    print "Found multiple candidates in your Dropbox account."
    for index in range(len(metadata)):
      print '   [%i]: %s' % (index, metadata[index]['path'])

    selection = int(raw_input("Which file would you like to pull down: "))
    return metadata[selection]

  def get_file(self, base_path, file_data):
    target_filename = file_data['path'].replace(base_path, "")
    # print '  Creating file: %s' % (target_filename)

    out = open(target_filename, 'wb')
    f, meta = self.dropbox_client.get_file_and_metadata(file_data['path'])
    with f:
      out.write(f.read())
    out.close()
    # set_owner(target_filename)

  def get_entire_folder(self, base_path, folder_path):

    folder_data = self.dropbox_client.metadata(folder_path)

    for index in range(len(folder_data['contents'])):
      if(folder_data['contents'][index]['is_dir']):
        new_folder = folder_data['contents'][index]['path'].replace(base_path, "")
        # print "Creating folder: " + new_folder
        self.create_dir(new_folder)
        self.get_entire_folder(base_path, folder_data['contents'][index]['path'])
      else:
        self.get_file(base_path, folder_data['contents'][index])


  def is_authorized(self):
    if self.config['token'] != None:
      self.dropbox_client = DropboxClient(self.config['token'])
      return True;
    else:
      return False;

  def authorize(self):
    flow = DropboxOAuth2FlowNoRedirect(self.config['key'], self.config['secret'])

    authorize_url = flow.start()
    print '1. Go to: ' + authorize_url
    print '2. Click "Allow" (you might have to log in first)'
    print '3. Copy the authorization code.'
    code = raw_input("Enter the authorization code here: ").strip()

    try:
      self.config['token'], user_id = flow.finish(code)
    except dbrest.ErrorResponse, e:
      print('Error: %s' % (e,))
      print 'Make sure you have created your Dropbox app and entered the correct authorization code'
      sys.exit(1)

    with open(self.config_file, 'w') as f:
        json.dump(self.config, f)

    self.dropbox_client = DropboxClient(self.config['token'])

  def fetch(self, filename, recurse):
    if(self.dropbox_client == None):
      print "No Dropbox client has been created. Make sure you have called is_authorized or authorize"
    
    metadata = self.dropbox_client.search("/", filename)
    
    # if metadata has more than one item prompt the user which file to pull
    target_meta = None
    if len(metadata) > 1:
      target_meta = self.choose_file(metadata)
    elif len(metadata) == 0:
      target_meta = None
    else:
      target_meta = metadata[0]

    if target_meta != None:
      last_slash = target_meta['path'].rfind("/")
      folder = target_meta['path'][:(last_slash + 1)]

      if recurse:
        # Pull all files from the same folder as well as subfolders
        self.get_entire_folder(folder, folder)
      else:
        self.get_file(folder, target_meta)


def check_for_arg(arg):
  for index in range(len(sys.argv)):
    if str(sys.argv[index]) == arg:
      return True

  return False

piClient = Preheat()

if piClient.is_authorized() == False:
  piClient.authorize()

if len(sys.argv) >= 2:
  target_filename = str(sys.argv[1])
  if check_for_arg('-r'):
    piClient.fetch(target_filename, True)
  else:
    piClient.fetch(target_filename, False)
else:
  print "You forgot to tell me which file to preheat."
  print "Usage:"
  print "    [sudo] preheat [file to fetch]"